char mytolower_char(char st)
{
	return static_cast<char>(tolower(static_cast<int>(st)));

}
template <typename T>
class convertor4
{
	T t;
public:
	convertor4(T ch)
	{
		t = ch;
	}

	void operator()(std::string& vtest)
	{
		for (std::string& s : vtest)
		{
			for (char& c : s)
			{
				if (c >= 'A' && c <= 'Z') { c = tolower(c); }
				else if (c >= 'a' && c <= 'z') { c = toupper(c); }
			}
		}
	}

	void operator()(double& vtest)
	{
		vtest *= -1;
	}

	void operator()(int& vtest)
	{
		vtest *= -1;
	}
};

template<typename T> void NegateAll(T& t ) 
{	
	for (auto& tt : t)
	{
		std::cout << "\ntype is: " <<typeid(tt).name() << "";
		std::cout << "\nsize = " << std::size(tt);

		for (auto it = std::begin(tt), ite = std::begin(tt) + std::size(tt);it!=ite; ++it)
		{
		}

		//if (strcmp("double", typeid(tt).name()) == 0) 
		//{		tt *= -1 ;		}

		//std::transform(t.begin(), t.end(), t.begin(), mytolower_char);
		//int i = atoi(tt);
		//if (i != 0) { tt *= -1; }
		//else
		//tt = toupper(tt);*/
		//if (tt == 0) { tt *= -1; }
		//for(decltype( it) = std::begin(tt); it != std::end(tt); ++it)
		{
			//if (ttt >= 'A' && ttt <= 'Z') { tolower(ttt); }
			//else if (ttt >= 'a' && ttt <= 'z') { toupper(ttt); }
			//else { ttt *= -1; }
		}
	//	decltype( tt );
		std::cout << "\n " << tt;
	}
}

template<typename T, typename C = std::string> void NegateAllU( T<C>& tt)
{
	for (decltype(auto)& t : tt)
	{
		t *= -1;
	}
}
.............................................................................
template <typename FIRST, typename SECOND> 
auto SumCont(FIRST& f, std::list < SECOND >& l)
{
	size_t N = (std::size(f) >= std::size(l))? std::size(f): std::size(l);

	std::vector<double> v;
	v.resize(N);

	copy(std::begin(f), std::end(f), v.begin()); 
	transform(std::begin(l), std::end(l), std::begin(v), std::begin(v), [](const auto& a, const auto& b) { return  static_cast<double>(a) + static_cast<double>(b); });
	//копируем из меньшего в большее
	//if (N == std::size(f))
	//{
	//	transform(std::begin(l), std::end(l), std::begin(f), std::begin(v), [](const auto& a, const auto& b) { return  static_cast<double>(a) + static_cast<double>(b); });
	//	//transform(std::begin(l), std::end(l), std::begin(f),  std::begin(f), [](const auto& a, const auto& b) { return  static_cast<double>(a) + static_cast<double>(b); });
	//	//copy(std::begin(f), std::end(f), v.begin());// std::back_inserter(v));
	//}
	//else 
	//{
	//	transform(std::begin(f), std::end(f), std::begin(l), std::begin(v), [](const auto& a, const auto& b) { return  static_cast<double>(a) + static_cast<double>(b); });
	//	//transform(std::begin(f), std::end(f), std::begin(l), std::begin(l), [](const auto& a, const auto& b) { return  static_cast<double>(a) + static_cast<double>(b); });
	//	//copy(std::begin(l), std::end(l), v.begin());
	//}
	//
	return v;
}

template <typename FIRST, typename SECOND>
auto SumCont(std::vector < FIRST>& f, std::list < SECOND>& l)
{
	size_t N = (std::size(f) >= std::size(l)) ? std::size(f) : std::size(l);

	std::vector<double> v;
	v.resize(N);

	//копируем из меньшего в большее
	if (N == std::size(f))
	{
		transform(std::begin(l), std::end(l), std::begin(f), std::begin(f), [](const auto& a, const auto& b) { return static_cast<double>(a) + static_cast<double>(b); });
		copy(std::begin(f), std::end(f), v.begin());// std::back_inserter(v));
	}
	else
	{
		transform(std::begin(f), std::end(f), std::begin(l), std::begin(l), [](const auto& a, const auto& b) { return static_cast<double>(a) + static_cast<double>(b); });
		copy(std::begin(l), std::end(l), v.begin());
	}

	return v;
}

template <typename FIRST, typename SECOND>
auto SumCont(std::set < FIRST>& f, std::deque < SECOND>& l)
{
	size_t N = (std::size(f) >= std::size(l)) ? std::size(f) : std::size(l);

	std::vector<std::string> v;
	v.resize(N);

	//копируем из меньшего в большее
	if (N == std::size(f))
	{
		/*transform(std::begin(l), std::end(l), std::begin(f), std::begin(f), 
			[](const auto& a, const auto& b)
			{ 
				std::string s1("1 "); std::string s2("2");
				return s1 + s2; 
			});*/
		copy(std::begin(f), std::end(f), v.begin());// std::back_inserter(v));
	}
	else
	{
		//transform(std::begin(f), std::end(f), std::begin(l), std::begin(l), []( auto& a,  auto& b) { return std::string(a) + std::string(b); });
		copy(std::begin(l), std::end(l), v.begin());
	}

	return v;
}