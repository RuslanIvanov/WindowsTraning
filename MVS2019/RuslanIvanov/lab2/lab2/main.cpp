// Темы:
// Простое наследование. Виртуальные функции. Абстрактные классы.
// Битовые поля.


#include <tchar.h>
#include <iostream>
#include "myString.h"
#include "myRect.h"
#include "Circle.h"

#define	  stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{
	//MyString sss("qqq");
	//sss.GetString()[0] = 'W';// нельзя так как GetString возвр указательн на конст
	//Задание 1.Массив объектов класса.
	{
	//Объявите и проинициализируйте массив ar из объектов
	//типа MyString. 
		
	//const int N=3;
	const int N=5;
	MyString str1[N] = {MyString("1 string"),MyString("2 string"),MyString("3 string")};//в остальных констр по умолчаню при 5 N
  
	//Проверка - печать строк-членов класса
	for (int i = 0; i < N; i++)
	{
		if (str1[i].GetString() != nullptr)
		{
			std::cout << "\n#" << i << ": '" << str1[i].GetString() << "'";
		}
		else std::cout << "\n#" << i << " NULL";
	}

	//Замените размер const int N=5; , не изменяя список инициализаторов.
		

	}
	stop

	//Задание 2.Массив указателей на объекты класса.
	{
	//Объявите и проинициализируйте массив arPtr из N
	//указателей на объекты типа MyString.
	//const int N=3;
	const int N = 5;
	MyString* arPtr[N] = { new MyString("aaa"), new  MyString("bbb"), new MyString("ccc") }; //NULL, NULL -  правила не полной инициализации массива! - потому и NULL
	//Печать строк-членов класса
	for (int i = 0; i < N; i++)
	{
		if (arPtr[i] != nullptr)
		{
			std::cout << "\n#" << i << ": '" << arPtr[i]->GetString() << "'";
		}
		else std::cout << "\n#" << i << " NULL";
	}

	for (int i = 0; i < N; i++)
	{
		delete arPtr[i];// delete c nullptr работает корректно
	}
	
   	//Замените размер const int N=5; , не изменяя список инициализаторов.

	}
		stop


		//Задание 3.Простое наследование.Аргументы конструктора,
		// передаваемые в базовый класс.

		//Создайте иерархию классов:
		//базовый класс Shape (который описывает любую фигуру)
		//и два производных класса Rect и Circle.
		//Подумайте: какие данные и методы нужно ввести в базовый
		//и производные классы (например, любую фигуру можно сделать
		//цветной => в базовом классе можно ввести переменную, которая
		//будет определять цвет фигуры.
		//Подсказка: для хранения цвета объявите перечисление (RED,GREEN,BLUE...);


		//В конструкторах производных классов предусмотрите передачу
		//параметра-цвета конструктору базового класса.
		//При создании и уничтожении объекта производного типа определите
		//последовательность вызовов конструкторов и деструкторов базового
		//и производного классов
	{
		Rect rA;// деволтный конструктор базового, затем производного
		Rect rB(1,2,4,5,BLUE);  // конструктор c параметрами базового, затем производного
		Circle cA;
		Circle cB(GREEN);
		rA.printColor();
		rB.printColor();
		cA.printColor();
		cB.printColor();
	}//дестр. производного, затем базового ()
	stop
//////////////////////////////////////////////////////////////////////

	//Задание 4.Виртуальные функции.
	//4а) Модифицируйте классы Shape,Rect и Circle:
	//добавьте в каждый класс public метод void WhereAmI().
	//Реализация каждой функции должна выводить сообщение 
	//следующего вида "Now I am in class Shape(Rect или Circle)".
	//Выполните приведенный фрагмент, объясните результат.

	//4б) Сделайте метод WhereAmI() виртуальным.
	//Снова выполните приведенный фрагмент, объясните разницу.

	{
		Shape s(BLUE);
		Rect r(1,2,5,9);
		Circle c(GREEN);

	
		//Метод какого класса вызывается в следующих строчках???
		s.WhereAmI();	//	посредством объекта вызывается соотв. метод класса
		r.WhereAmI();	//	посредством объекта вызывается соотв. метод класса
		c.WhereAmI();	//	посредством объекта вызывается соотв. метод класса
		stop


		Shape* pShape = &s; // адрес Shape к базовому
		Shape* pRect = &r; // компил . приводит адрес класса к базовому
		Shape* pCircle = &c; // компил . приводит адрес класса к базовому
    	pShape->WhereAmI();	//	посредством указателя на  класс Shape вызывается метод класса
		pRect->WhereAmI();	//	посредством указателя на баовый класс вызывается метод базового
		pCircle->WhereAmI(); //	посредством указателя на баовый класс вызывается метод базового
		stop

/*
		//Заполните ... согласно комментариям
		Shape& rShape = ...; //псевдоним s
		Shape& rRect = ...; //псевдоним r
		Shape& rCircle = ...; //псевдоним c
    	...WhereAmI();	//вызов посредством rShape	???
		...WhereAmI();	//вызов посредством	rRect	???
		...WhereAmI(); //вызов посредством rCircle	???
		//*/
		stop
	}


//////////////////////////////////////////////////////////////////////
/*
	//Задание 5.Виртуальные деструкторы.
	//Модифицируйте классы:
	//a) введите соответствующие
	// деструкторы (без ключевого слова virtual).
	//Реализация каждого деструктора
	//должна выводить сообщение следующего вида
	// "Now I am in Shape's destructor!" или
	// "Now I am in Rect's destructor!"
	//Выполните фрагмент. Объясните результат.

	// b) Добавьте в объявление деструкторов ключевое слово virtual 
	//Выполните фрагмент.Объясните разницу.

	
	//Подумайте: какие конструкторы вызываются в следующей строке?
		//Если в разработанных классов каких-то конструкторов
		//не хватает - реализуйте
		//Если Вы считаете, что в приведенном фрагменте чего-то
		//не хватает - добавьте

		Rect r(<параметры>);
		Shape* ar[]={new Shape(r), new Rect(r), new Circle(r), new Circle() };
		//Вызовите для каждого элемента массива метод WhereAmI()
	

	stop
*/

/*
	//Задание 6*. В чем заключается отличие 1) и 2)
	{
		Shape* pShapes = new Rect[10];//1)
		Rect* pRects = new Rect[10];//2)

		//Попробуйте вызвать метод WhereAmI() для каждого элемента обоих массивов -
		//в чем заключается проблема???


		//Освободите динамически захваченную память

	}

*/

//////////////////////////////////////////////////////////////////////
/*
	//Задание 7.Виртуальные функции и оператор разрешения области видимости. 

	{
		Rect r(...);
		Shape* p = &r;	
		p->WhereAmI();//...
		stop
	
		
		//4a Оператор разрешения области видимости.
		//Посредством объекта r и указателя p вызовите виртуальную функцию
		//WhereAmI()класса Shape
		
		
	}
*/

//////////////////////////////////////////////////////////////////////
/*
	//Задание 8.Чисто виртуальные функции. 
	//Введите в базовый класс метод void Inflate(int); Подумайте:
	//можно ли реализовать такой метод для базового класса? => как его нужно объявить.
	//Реализуйте этот метод для производных классов.
	{
		Rect r(...);
		Shape* p = &r;
		p->Inflate(5);
		Circle c(...);
		p = &c;
		p->Inflate(5);
	}
*/


//////////////////////////////////////////////////////////////////////
	//Задание 9. Создайте глобальную функцию, которая будет принимать любое
	//количество указателей на строки, а возвращать объект MyString,
	//в котором строка будет конкатенацией параметров

////////////////////////////////////////////////////////////////////////
/*
	//Задание 10.Объединения (union) C++. Битовые поля.
	//1.
	//Создайте следующие классы для различных представлений значений байта:
	//Bin - для двоичного представления
	//Hex - для шестнадцатерчного представления
	//Oct - для восьмеричного представления.
	//Подсказка 1: - для удобства используйте битовые поля.
	//Подсказка 2: - конструкторов в таких вспомогательных классах быть не должно,
	//так как все они будут членами объединения (union).
	//2.
	//В каждом классе введите метод Show, который должен выводить значение в
	//соответствующем виде
	//3.
	//Посредством объединения MyByte предоставьте пользователю возможность манипулировать
	//одним и тем же значением по-разному:
	//а) выводить: десятичное, шестнадцатеричное, восьмеричное, двоичное значение байта 
	//          а также символ, соответствующий хранимому значению (если есть соответствие);
	//б) выводить отдельные (указанные посредством параметра) шестнадцатеричные,
	//			восьмеричные, двоичные цифры;
	//в) изменять отдельные двоичные, восьмеричные или шестнадцатеричные цифры;

	MyByte byte(0x1f);
	byte.ShowHex();
	byte.ShowBin();
	//...


*/
	return 0;
}//endmain

