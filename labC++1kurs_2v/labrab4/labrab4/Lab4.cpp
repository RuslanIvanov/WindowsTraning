
/*************************************************************
	Практическое занятие №3. Функции.
	Объявление, определение, вызов.
	Передача параметров. Возвращение значения.
	Указатели на функции
*************************************************************/
#include <iostream>
#include <tchar.h>
#include <cstdio>
#include <cstdarg>
#include <cstdlib>
#include <cstdlib>
#include <ctime> 
#include "other.h"

#define	  stop __asm nop

int _tmain()
{
	

	//Задание 1. Отличия при передаче параметров а) по значению,
	// б) по ссылке, в) по указателю
	//Объявите и определите три функции , которые увеличивают заданное
	//с помощью параметра значение на 1 ( а) - IncByValue(),
	// б) - IncByPointer(), в) - IncByReference() ). 
	//Проверьте правильность с помощью отладчика.
	//
	//Замечание: объявления функций принято помещать в заголовочный файл
	int val =1;//значение этой переменной должно быть увеличено с помощью
				//каждой из функций на единицу
	val=IncByValue(val);
	printf("val1 = %d",val);
    IncByReference(val);
    printf("val2 = %d",val);
    IncByPointer(&val);
    printf("val3 = %d",val); 
	stop

/*
	//Задание 1а. Передача параметров c помощью указателя и по ссылке. 
	//Перегруженные имена функций.
	//Создайте функцию (функции) Swap(), которая меняет значения
	//переменных nX и nY местами. 
	// а)Функция должна принимать два указателя на int, оперируя с 
	//которыми менять значения переменных в вызывающей программе
	// б)Функция должна принимать две ссылки на int 
	//Проверьте правильность с помощью приведенного ниже фрагмента.

	int	nX = 1;
	int nY = -1;
	Swap(...  ,  ...);	//поменяли местами значения nX и nY с
						//помощью указателей на nX и nY
	Swap(...  ,  ...);	//а теперь обратно с помощью ссылок на nX и nY
	stop
*/
    int	nX = 1;
	int nY = -1;
	printf("\n%d,%d",nX,nY);
	Swap(&nX,&nY);
	printf("\n%d,%d",nX,nY);
    Swap(nX,nY);
    printf("\n%d,%d",nX,nY);

    stop 
/*
	//Задание 2. Указатели на массивы в качестве аргументов.
	//2a.Напишите два варианта функции поиска минимального элемента
	//1. во встроенном двухмерном массиве
	//2. в динамическом двухмерном массиве (обе размерности вычисляются)
	
	//1.Например:
	int ar[N][M] = {список инициализаторов};//подумайте - как и где должны быть заданы N и M
	int res = Min(ar, ... может быть, понадобится передать еще какие-нибудь данные); 
*/
    int res;
	int ar[N][M] = {{11,2,3,4,5},{6,4,50,11,33}};
	//способ 1
	res = Min(ar[0],sizeof(ar)/sizeof(ar[0][0]));//кол_во эл мас
	printf("\nres = %d",res);
    //способ 2            
	res = Min2(ar,sizeof(ar)/sizeof(ar[0])); //число строк
	printf("\nres = %d",res);

	srand( time( 0 ) );
	int ni =  rand()%10+2;
	int nj =  rand()%10+2;
	int *p = new int [ni*nj];
	printf("\nInMass:");
	for(int i=0;i<(ni*nj);i++)
	 {*(p+i)=rand()%20;// Заполнение массива
	  printf("%d ",*(p+i));
	 }
    //
	res = Min3(p,(nj*ni));
    printf("\nres_din1 = %d",res); //1 способ
    //способ 2
	int **pp = new int *[ni]; 
    for(int i = 0;i<ni;i++)
     pp[i]=p+i*nj; // масив указ
	res =  Min4(pp,ni,nj);
    printf("\nres_din2 = %d",res);
	delete [] p;
	p=0;
	delete [] pp;
	pp=0;//*/
 	stop

	//2b. Напишите функцию сравнения двух строк - MyStrCmp():
	//Функция должна принимать два указателя на сравниваемые
	//строки (возможно Вы должны указать компилятору, что функция
	//не имеет права модифицировать содержимое строк)
	//Функция должна возвращать отрицательное значение, если
	//первая строка лексиграфически меньше второй, 0 - если
	//они равны и положительное значение, если первая строка
	//больше второй.
	//Вспомните, что признаком конца строки является нулевой байт.
	//{int res;
	//Создайте две строки для сравнения: 
	{
    char cAr1 [] = "aaa";
	char cAr2 [] = "aaaаа";
	char *pstr1 = cAr1;
	char *pstr2 = cAr2;
	printf("\nstr1 = %s",cAr1);
	printf("\nstr2 = %s",cAr2);
	//Вызовите функцию сравнения
	 res = MyStrCmp(pstr1,pstr2);//-22 ???
	//res = static_cast<int>(MyStrCmp(pstr1,pstr2));
	//Выведите результат сравнения с помощью cout:
     printf("\nres_str = %d",res);
	 if(res<0) printf("\n1 string > 2 string");
	 else if(res>0)printf("\n1 string < 2 string");
	      else printf("\n1 string = 2 string");
	} 
	stop


	//Задание 3.Ссылки в качестве параметров. Передача указателя на встроенный
	//массив в качестве параметра функции.
	//Напишите две взаимодополняющие друг друга функции:
	//1.  ... DayOfYear(...)
	//- преобразует день месяца (число,месяц и год задаются в качестве параметров)
	//в порядковый день года(возвращаемое значение)
	//2. ... DayOfMonth(...) - функция преобразует порядковый день года в день месяца
	// (принимает год и порядковый день года в качестве параметров и должна сформировать
	// день месяца и номер месяца и каким-то образом сообщить эти значения вызывающей процедуре)
	{
		int Day,month,Year,nDayYear;
		printf("\nEnter Day,Month,Year: ");
		scanf("%d %5d %5d",&Day,&month,&Year);
		bool isLeapYear = (!Year%400) ||(Year%100&&!Year%4);//==1 висок
		if(isLeapYear==1) printf("IsLeapYear"); 
		else printf("NoLeapYear");   
	//-
	//Проверьте работоспособность обеих функций с помощью следующего фрагмента:
	

	//В процессе вычислений Вам придется учитывать "високосный - невисокосный" год.
	//Для этого предлагается в каждую функцию в качестве одного из параметров передавать
	//данные приведенного ниже двухмерного массива nDayTab

	int nDayTab[2][12]={
		{31,28,31,30,31,30,31,31,30,31,30,31}, //невисокосный год
		{31,29,31,30,31,30,31,31,30,31,30,31}	};	//високосный годnDayTab
	
	//Вызов функции DayOfYear
	 nDayYear=DayOfYear(Day,month,Year,nDayTab);
	 printf("\nnDayYear=%d",nDayYear);

	//Проверка результата обратной функцией DayOfMonth
	DayOfMonth(Year,nDayYear,Day,month,nDayTab);
    printf("\nDay=%d,month=%d",Day,month);
	}
	stop



	//Задание 4. Рекурсивные функции. Напишите рекурсивную функцию вычисления
	//суммы первых N натуральных чисел.
	{int N,Sum;
	  N=10;
	  Sum=RecSum(N);
	  printf("\nSumRec=%d",Sum);
	}
    stop



	//Задание 5а. Функции с переменным числом параметров.
	//Напишите функцию (дана заготовка VarArgs, не использующая
	// макросы), которая принимает переменное число аргументов
	// типа int и выводит на печать число принятых параметров и
	// их значения.
	// Признаком конца списка является нулевое значение.
	
	int nN1=5, nN2=11, nN3=4, nN4=7, nN5=-1;
	//VarArgs(nN1,0);	
	//VarArgs(nN1,nN2,0);	
	VarArgs(nN1,nN2,nN3,nN4,nN5,0);	
	stop


	//Задание 5б. Модифицируйте функцию 5а с помощью макросов
	// va_start, va_arg, va_end

    Args(nN1,nN2,nN3,nN4,nN5,0);
    stop
	return 0;
}//main

